#!/bin/sh

set -e

: ${PKGBREW:="https://raw.githubusercontent.com/ta2gch/pkgbrew/master/bin/pkgbrew"}
: ${PKGHOST:="http://cdn.netbsd.org/pub/pkgsrc/stable/pkgsrc.tar.bz2"}
: ${PKGHOME:="${HOME}/.pkgbrew"}
: ${PKGSRC:="${PKGHOME}/src"}
: ${MAKE_JOBS:=1}
: ${CC:=gcc}
version(){
    cat<<EOF
pkgbrew revision : v0.3.1-3-g09f6fcf
pkgsrc   version : trunk
Copyright (c) 2016 TANIGUCHI Masaya

pkgbrew comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of pkgbrew under the terms of The BSD 2-Clause License.
For more infomation about these matters, see the file named LICENSE.
Homepage: https://github.com/ta2gch/pkgbrew
EOF
}
help(){
    cat<<EOF
pkgbrew <command> [<package>]
command:

    help		: show usage 
    search		: search packages
    tap                 : add user repository
    untap               : remove user repository
    version             : output version information
    update              : update repositories
    description         : show description of pacakge

    Build pkgsrc package 

    depends		: build and install dependencies
    fetch		: fetch distribution file(s)
    checksum		: fetch and check distribution file(s)
    extract		: look at unmodified source
    patch		: look at initial source
    configure		: stop after configure stage
    all or build	: stop after build stage
    stage-install	: install under stage directory
    test		: run package's self-tests, if any exist and supported
    package		: create binary package before installing it
    replace		: change (upgrade, downgrade, or just replace) installed package in-place
    deinstall		: deinstall previous package
    package-install	: install package and build binary package
    install		: install package
    bin-install		: attempt to skip building from source and use pre-built binary package
    show-depends        : print dependencies for building
    show-options        : print available options from options.mk

    Cleanup targets (in separate section because of importance):

    clean-depends	: remove work directories for dependencies
    clean		: remove work directory
    distclean		: remove distribution file(s)
    package-clean	: remove binary package

    Package Development

    makesum		: fetch and generate checksum for distributed file(s)
    makepatchsum	: (re)generate checksum for patches
    makedistinfo	: (re)generate distinfo file (creating checksums for distributed file and patches)
    print-PLIST		: attempt to generate correct packaging list (NB! It helps, but it doesn't eliminate manual work.)

EOF
}
search(){
    packagedir=`dirname "${1}" | tr '/' '_'`
    packagename=`basename "${1}"`
    find "${PKGSRC}" -maxdepth 2 -mindepth 2 -type d \
	| grep "${packagedir}/${packagename}" \
	| sed -e "s@${PKGSRC}/@@" \
	| tr '_' '/'
}

download_1(){
    from="${1}"
    dest="${2}"
    if which wget > /dev/null ; then
	wget -O "${dest}" "${from}"
    elif which curl > /dev/null ; then
	if [ "${dest}" = "-" ] ; then
	    curl -L "${from}"
	else
	    curl -L -o "${dest}" -O "${from}"
	fi
    fi
}

download(){
    from="${1}"
    dest="${2}"
    case "${from}" in
	https://*) download_1 "${from}" "${dest}" ;;
	http://*) download_1 "${from}" "${dest}" ;;
	*) cp "${from}" "${dest}" ;;
    esac
}

convert_repository_name(){
    echo "${PKGSRC}/`echo ${1} | sed -e 's%/%_%g'`"
}

tap(){
    if [ -d `convert_repository_name "${1}"` ]; then
	echo repository already exits: ${1}
	exit 1;
    fi
    
    mkdir `convert_repository_name "${1}"`

    echo "${1}" >> "${PKGHOME}/etc/user-repositories"

    download "https://github.com/${1}/archive/master.tar.gz" "-" \
	| tar xz \
	      --strip-components 1 \
	      -C `convert_repository_name "${1}"`
}

untap(){
    if [ -z `echo ${1} | tr -d -c '/'` ]; then
	echo \'${1}\' is not user repository
	exit 1;
    elif [ ! -d `convert_repository_name "${1}"` ]; then
	echo repository already removed: ${1}
	exit 1;
    fi
    
    echo Deleting repository...

    rm -r `convert_repository_name "${1}"`

    echo Completed.

    cp "${PKGHOME}/etc/user-repositories" \
       "${PKGHOME}/etc/user-repositories.bak"

    cat "${PKGHOME}/etc/user-repositories.bak"  \
	| sed -e "s%${1}%##%g"                  \
	| sed -e "/##/d"                        \
	> "${PKGHOME}/etc/user-repositories"
}

update(){
    download "${PKGHOST}" "-" \
	| tar xj --strip-components 1 -C "${PKGSRC}"

    if [ -f "${PKGHOME}/etc/user-repositories" ]; then
	cat "${PKGHOME}/etc/user-repositories" | while read repo ;do
	    untap "${repo}"
	    tap "${repo}"
	done
    fi

    download "${PKGBREW}" "${PKGHOME}/bin/pkgbrew"

    chmod +x "${PKGHOME}/bin/pkgbrew"
}
description(){
    package="${PKGSRC}/${1}"
    if [ ! -n "${1}" -o ! -d "${package}" ]; then
	echo No package \'${2}\' found, did you mead:
	search "${1}" | sed -e "s/^/ /"
	echo pkgbrew: package not found
	exit 1;
    fi

    cat "${package}/DESCR"
}

run_command(){
    command="${1}"
    genre=`dirname "${2}" | tr '/' '_'`
    packagename=`basename "${2}"`
    packagedir="${PKGSRC}/${genre}/${packagename}"

    if [ ! -n "${2}" -o ! -d "${packagedir}" ]; then
	echo No package \'${2}\' found, did you mead:
	search "${2}" | sed -e "s/^/ /"
	echo pkgbrew: package not found
	exit 1;
    fi

    cd "${packagedir}"

    case "${command}" in
	"show-depends"|"show-options"|"print-PLIST")
	    ${PKGHOME}/bin/bmake "${command}" ;;
	*) ${PKGHOME}/bin/bmake "${command}" | awk "
BEGIN {
    flag=0
}

/^==========/ {
    if(flag == 1) {
	flag = 0;
	print;
    } else {
	flag = 1;
    }
}

/^=+>/ || flag == 1 {
    print;
}
" ;;
    esac
}

main(){
    command="${1}"
    package="${2}"

    case "${command}" in
	"help") help ;;
	"search") search "${package}" ;;
	"tap") tap "${package}" ;;
	"untap") untap "${package}" ;;
	"version") version ;;
	"update") update ;;
	"description") description "${package}";;

	"help") run_command "${command}" "${package}" ;;
	"search") run_command "${command}" "${package}" ;;
	"setup") run_command "${command}" "${package}" ;;
	"depends") run_command "${command}" "${package}" ;;
	"fetch") run_command "${command}" "${package}" ;;
	"checksum") run_command "${command}" "${package}" ;;
	"extract") run_command "${command}" "${package}" ;;
	"patch") run_command "${command}" "${package}" ;;
	"configure") run_command "${command}" "${package}" ;;
	"all or build") run_command "${command}" "${package}" ;;
	"stage-install") run_command "${command}" "${package}" ;;
	"test") run_command "${command}" "${package}" ;;
	"package") run_command "${command}" "${package}" ;;
	"replace") run_command "${command}" "${package}" ;;
	"deinstall") run_command "${command}" "${package}" ;;
	"package-install") run_command "${command}" "${package}" ;;
	"install") run_command "${command}" "${package}" ;;
	"bin-install") run_command "${command}" "${package}" ;;
	"show-depends") run_command "${command}" "${package}" ;;
	"show-options") run_command "${command}" "${package}" ;;

	"clean-depends") run_command "${command}" "${package}" ;;
	"clean") run_command "${command}" "${package}" ;;
	"distclean") run_command "${command}" "${package}" ;;
	"package-clean") run_command "${command}" "${package}" ;;

	"makesum") run_command "${command}" "${package}" ;;
	"makepatchsum") run_command "${command}" "${package}" ;;
	"makedistinfo") run_command "${command}" "${package}" ;;
	"print-PLIST") run_command "${command}" "${package}" ;;
	*)  echo Invalid command: ${1}
	    help ;;
    esac
}

main "${1}" "${2}"
